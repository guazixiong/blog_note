(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{337:function(v,_,t){"use strict";t.r(_);var r=t(4),e=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"设计模式学习路线-by-程序员鱼皮"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式学习路线-by-程序员鱼皮"}},[v._v("#")]),v._v(" 设计模式学习路线 by 程序员鱼皮")]),v._v(" "),_("blockquote",[_("p",[v._v("本文作者："),_("a",{attrs:{href:"https://yuyuanweb.feishu.cn/wiki/Abldw5WkjidySxkKxU2cQdAtnah",target:"_blank",rel:"noopener noreferrer"}},[v._v("程序员鱼皮"),_("OutboundLink")],1)]),v._v(" "),_("p",[v._v("本站地址："),_("a",{attrs:{href:"https://codefather.cn",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://codefather.cn"),_("OutboundLink")],1)])]),v._v(" "),_("h2",{attrs:{id:"介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),_("p",[v._v("大家有没有思考过如下几个问题？")]),v._v(" "),_("ul",[_("li",[v._v("同样都是写代码，为什么有些同学的思路清晰、代码整洁；而我的代码却充满了重复和混乱，每次要修改时都无从下手、Bug 一堆？")]),v._v(" "),_("li",[v._v("如何写代码，才能使得项目易于扩展和维护？")]),v._v(" "),_("li",[v._v("我每天都在写重复的代码，如何提升水平？")]),v._v(" "),_("li",[v._v("为什么我读不懂大佬写的源码？是不是缺少了什么知识？")])]),v._v(" "),_("p",[v._v("如果存在上述问题，那么我们一定要学习软件开发中的重要技能 —— 设计模式。")]),v._v(" "),_("p",[v._v("设计模式是软件开发人员在软件开发过程中面临的一般问题的 "),_("strong",[v._v("通用")]),v._v(" 解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),v._v(" "),_("p",[v._v("通俗地说就是前辈们在写代码时摸索出了一些不错的方法，可以用于解决一类问题、更好地开发和维护项目。于是其他软件开发者纷纷效仿，久而久之，就得出了一套优秀的软件开发方法总结。")]),v._v(" "),_("p",[v._v("目前最为经典的设计模式有 23 种，学习之后，不仅能帮助我们开拓思路、写出更优质的代码、提高项目的开发和维护效率；还能够帮助我们更好地阅读和理解源码，甚至可以根据文件名称直接推断出源码的架构设计（有点行话的感觉）！因此，在准备阅读框架源码前，强烈建议先学习设计模式。")]),v._v(" "),_("p",[v._v("此外，设计模式也是软件开发相关岗位面试的重点（尤其是大厂、后端开发岗位），建议大家有时间的话都要学习。")]),v._v(" "),_("h2",{attrs:{id:"问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[v._v("#")]),v._v(" 问题")]),v._v(" "),_("p",[v._v("Q：前端要不要学设计模式？")]),v._v(" "),_("p",[v._v("A：先学习基础的界面开发、组件库和框架的使用，之后可以将设计模式作为进阶知识来学习，想进大厂建议学习。毕竟设计模式是软件开发的通用思想 / 技能，独立于编程语言。")]),v._v(" "),_("h2",{attrs:{id:"学习条件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习条件"}},[v._v("#")]),v._v(" 学习条件")]),v._v(" "),_("ol",[_("li",[v._v("至少学过一门编程语言（学设计模式时需要多写代码实践）")]),v._v(" "),_("li",[v._v("使用过至少一门开发框架（这样在学习设计模式的时候能够和框架的设计结合起来，更好理解）")])]),v._v(" "),_("h2",{attrs:{id:"大纲"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大纲"}},[v._v("#")]),v._v(" 大纲")]),v._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%20by%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE.png#id=ygV2a&originHeight=1303&originWidth=2290&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",loading:"lazy"}})]),v._v(" "),_("h2",{attrs:{id:"知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#知识"}},[v._v("#")]),v._v(" 知识")]),v._v(" "),_("ul",[_("li",[v._v("软件开发原则\n"),_("ul",[_("li",[v._v("单一职责原则（SRP）")]),v._v(" "),_("li",[v._v("开闭原则（OCP）")]),v._v(" "),_("li",[v._v("里氏替换原则（LSP）")]),v._v(" "),_("li",[v._v("依赖倒置原则（DIP）")]),v._v(" "),_("li",[v._v("接口隔离原则（ISP）")]),v._v(" "),_("li",[v._v("迪米特法则（最少知道原则）")]),v._v(" "),_("li",[v._v("合成 / 聚合复用原则（CARP）")])])]),v._v(" "),_("li",[v._v("设计模式分类\n"),_("ul",[_("li",[v._v("根据作用范围：类 / 对象模式")]),v._v(" "),_("li",[v._v("根据目的分类：创建型 / 结构型 / 行为型模式")])])]),v._v(" "),_("li",[v._v("创建型模式：如何创建对象\n"),_("ul",[_("li",[v._v("单例模式（懒汉式、饿汉式、双检锁、线程唯一单例）")]),v._v(" "),_("li",[v._v("工厂方法模式（类）")]),v._v(" "),_("li",[v._v("抽象工厂模式")]),v._v(" "),_("li",[v._v("建造者模式")]),v._v(" "),_("li",[v._v("原型模式")])])]),v._v(" "),_("li",[v._v("结构型模式：如何将类或对象结合在一起形成一个更强大的结构\n"),_("ul",[_("li",[v._v("适配器模式（类 / 对象）")]),v._v(" "),_("li",[v._v("组合模式")]),v._v(" "),_("li",[v._v("装饰器模式")]),v._v(" "),_("li",[v._v("代理模式")]),v._v(" "),_("li",[v._v("享元模式")]),v._v(" "),_("li",[v._v("外观模式")]),v._v(" "),_("li",[v._v("桥接模式")])])]),v._v(" "),_("li",[v._v("行为型模式：类或对象间如何交互、如何划分职责，从而更好地完成任务\n"),_("ul",[_("li",[v._v("迭代器模式")]),v._v(" "),_("li",[v._v("模板方法模式（类）")]),v._v(" "),_("li",[v._v("策略模式")]),v._v(" "),_("li",[v._v("命令模式")]),v._v(" "),_("li",[v._v("状态模式")]),v._v(" "),_("li",[v._v("责任链模式")]),v._v(" "),_("li",[v._v("备忘录模式")]),v._v(" "),_("li",[v._v("观察者模式")]),v._v(" "),_("li",[v._v("访问者模式")]),v._v(" "),_("li",[v._v("中介者模式")]),v._v(" "),_("li",[v._v("解释器模式（类）")])])])]),v._v(" "),_("h3",{attrs:{id:"知识表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#知识表"}},[v._v("#")]),v._v(" 知识表")]),v._v(" "),_("blockquote",[_("p",[v._v("表格来源： "),_("a",{attrs:{href:"https://home.cnblogs.com/u/schips/",target:"_blank",rel:"noopener noreferrer"}},[v._v("schips"),_("OutboundLink")],1)])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("设计模式")]),v._v(" "),_("th",[v._v("适用层次")]),v._v(" "),_("th",[v._v("引入时机")]),v._v(" "),_("th",[v._v("复杂度")]),v._v(" "),_("th",[v._v("变化")]),v._v(" "),_("th",[v._v("实现")]),v._v(" "),_("th",[v._v("体现的原则")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("工厂方法")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("编码时")]),v._v(" "),_("td",[v._v("简单")]),v._v(" "),_("td",[v._v("子类的实例化")]),v._v(" "),_("td",[v._v("对象的创建工作延迟到子类")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("单例")]),v._v(" "),_("td",[v._v("代码级、应用级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("简单")]),v._v(" "),_("td",[v._v("唯一实例")]),v._v(" "),_("td",[v._v("封装对象产生的个数")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("门面")]),v._v(" "),_("td",[v._v("应用级、构架级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("简单")]),v._v(" "),_("td",[v._v("子系统的高层接口")]),v._v(" "),_("td",[v._v("封装子系统")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("模板方法")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("编码时、重构时")]),v._v(" "),_("td",[v._v("简单")]),v._v(" "),_("td",[v._v("算法子步骤的变化")]),v._v(" "),_("td",[v._v("封装算法结构")]),v._v(" "),_("td",[v._v("依赖倒置原则")])]),v._v(" "),_("tr",[_("td",[v._v("抽象工厂")]),v._v(" "),_("td",[v._v("应用级")]),v._v(" "),_("td",[v._v("设计时")]),v._v(" "),_("td",[v._v("较复杂")]),v._v(" "),_("td",[v._v("产品家族的扩展")]),v._v(" "),_("td",[v._v("封装产品族系列内容的创建")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("组合")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("编码时、重构时")]),v._v(" "),_("td",[v._v("较复杂")]),v._v(" "),_("td",[v._v("复杂对象接口的统一")]),v._v(" "),_("td",[v._v("统一复杂对象的接口")]),v._v(" "),_("td",[v._v("里氏代换原则")])]),v._v(" "),_("tr",[_("td",[v._v("代理")]),v._v(" "),_("td",[v._v("应用级、构架级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("简单")]),v._v(" "),_("td",[v._v("对象访问的变化")]),v._v(" "),_("td",[v._v("封装对象的访问过程")]),v._v(" "),_("td",[v._v("里氏代换原则")])]),v._v(" "),_("tr",[_("td",[v._v("命令")]),v._v(" "),_("td",[v._v("应用级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("较简单")]),v._v(" "),_("td",[v._v("请求的变化")]),v._v(" "),_("td",[v._v("封装行为对对象")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("观察者")]),v._v(" "),_("td",[v._v("应用级、构架级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("较简单")]),v._v(" "),_("td",[v._v("通讯对象的变化")]),v._v(" "),_("td",[v._v("封装对象通知")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("策略")]),v._v(" "),_("td",[v._v("应用级")]),v._v(" "),_("td",[v._v("设计时")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("算法的变化")]),v._v(" "),_("td",[v._v("封装算法")]),v._v(" "),_("td",[v._v("里氏代换原则")])]),v._v(" "),_("tr",[_("td",[v._v("建造者")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("编码时")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("对象组建的变化")]),v._v(" "),_("td",[v._v("封装对象的组建过程")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("Adapter")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("重构时")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("对象接口的变化")]),v._v(" "),_("td",[v._v("接口的转换")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("桥接")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("对象的多维度变化")]),v._v(" "),_("td",[v._v("分离接口以及实现")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("装饰器")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("重构时")]),v._v(" "),_("td",[v._v("较复杂")]),v._v(" "),_("td",[v._v("对象的组合职责")]),v._v(" "),_("td",[v._v("在稳定接口上扩展")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("迭代器")]),v._v(" "),_("td",[v._v("代码级、应用级")]),v._v(" "),_("td",[v._v("编码时、重构时")]),v._v(" "),_("td",[v._v("较简单")]),v._v(" "),_("td",[v._v("对象内部集合的变化")]),v._v(" "),_("td",[v._v("封装对象内部集合的使用")]),v._v(" "),_("td",[v._v("单一职责原则")])]),v._v(" "),_("tr",[_("td",[v._v("中介者")]),v._v(" "),_("td",[v._v("应用级、构架级")]),v._v(" "),_("td",[v._v("编码时、重构时")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("对象交互的变化")]),v._v(" "),_("td",[v._v("封装对象间的交互")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("备忘录")]),v._v(" "),_("td",[v._v("代码级")]),v._v(" "),_("td",[v._v("编码时")]),v._v(" "),_("td",[v._v("较简单")]),v._v(" "),_("td",[v._v("状态的辅助保存")]),v._v(" "),_("td",[v._v("封装对象状态的变化")]),v._v(" "),_("td",[v._v("接口隔离原则")])]),v._v(" "),_("tr",[_("td",[v._v("状态")]),v._v(" "),_("td",[v._v("应用级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("对象状态的变化")]),v._v(" "),_("td",[v._v("封装与状态相关的行为")]),v._v(" "),_("td",[v._v("单一职责原则")])]),v._v(" "),_("tr",[_("td",[v._v("访问者")]),v._v(" "),_("td",[v._v("应用级")]),v._v(" "),_("td",[v._v("设计时")]),v._v(" "),_("td",[v._v("较复杂")]),v._v(" "),_("td",[v._v("对象操作变化")]),v._v(" "),_("td",[v._v("封装对象操作变化")]),v._v(" "),_("td",[v._v("开闭原则")])]),v._v(" "),_("tr",[_("td",[v._v("原型")]),v._v(" "),_("td",[v._v("应用级")]),v._v(" "),_("td",[v._v("编码时、重构时")]),v._v(" "),_("td",[v._v("较简单")]),v._v(" "),_("td",[v._v("实例化的类")]),v._v(" "),_("td",[v._v("封装对原型的拷贝")]),v._v(" "),_("td",[v._v("依赖倒置原则")])]),v._v(" "),_("tr",[_("td",[v._v("享元")]),v._v(" "),_("td",[v._v("代码级、应用级")]),v._v(" "),_("td",[v._v("设计时")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("系统开销的优化")]),v._v(" "),_("td",[v._v("封装对象的获取")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("责任链")]),v._v(" "),_("td",[v._v("应用级、构架级")]),v._v(" "),_("td",[v._v("设计时、编码时")]),v._v(" "),_("td",[v._v("较复杂")]),v._v(" "),_("td",[v._v("对象的请求过程")]),v._v(" "),_("td",[v._v("封装对象的责任范围")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("解释器")]),v._v(" "),_("td",[v._v("应用级")]),v._v(" "),_("td",[v._v("设计时")]),v._v(" "),_("td",[v._v("较复杂")]),v._v(" "),_("td",[v._v("领域问题的变化")]),v._v(" "),_("td",[v._v("封装特定领域的变化")]),v._v(" "),_("td")])])]),v._v(" "),_("p",[v._v("除了这 23 种主流设计模式外，还有一些其他设计模式，比如 Immutable 不可变模式等，了解即可。")]),v._v(" "),_("h2",{attrs:{id:"学习建议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习建议"}},[v._v("#")]),v._v(" 学习建议")]),v._v(" "),_("ol",[_("li",[v._v("对设计模式的学习和其他知识一样，先了解每种设计模式是什么？作用是什么？能够解决什么问题？适用于什么场景？有什么特点？类和对象的关系是什么（建议结合 UML 类图来理解）？再去考虑编码实现和进一步在项目中应用。")]),v._v(" "),_("li",[v._v("一定要多写代码实践，最好每个设计模式都实现一遍，不要去背代码，用的多了自然就能写出代码了。")]),v._v(" "),_("li",[v._v("每个设计模式都可以 "),_("strong",[v._v("独立学习")]),v._v(" ，互相之间联系不大，因此可以根据自己的时间来选择性学习（比如先学重点的单例模式）。")]),v._v(" "),_("li",[v._v("在学会基础的设计模式后，可以分析之前学过的框架源码（比如 Spring、MyBatis 等），参考别人是如何应用设计模式的。")]),v._v(" "),_("li",[_("strong",[v._v("不要过度依赖设计模式！！！！！！")]),v._v(" 它并不是银弹，过分使用设计模式可能只会增加系统的复杂度。")])]),v._v(" "),_("h2",{attrs:{id:"学习路线"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习路线"}},[v._v("#")]),v._v(" 学习路线")]),v._v(" "),_("p",[v._v("主流的设计模式共有 23 种，建议大家按照以下四个阶段来学习：")]),v._v(" "),_("ol",[_("li",[v._v("基础学习")]),v._v(" "),_("li",[v._v("编码实现")]),v._v(" "),_("li",[v._v("项目实战")]),v._v(" "),_("li",[v._v("备战面试")])]),v._v(" "),_("p",[v._v("其中第一个阶段和第二个阶段 "),_("strong",[v._v("可以同时进行")]),v._v(" ，即对于每个设计模式的学习都是：先了解、再编码实现。")]),v._v(" "),_("h3",{attrs:{id:"一、基础学习"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、基础学习"}},[v._v("#")]),v._v(" 一、基础学习")]),v._v(" "),_("p",[v._v("本阶段的目标：依次了解每一种设计模式的应用场景、特点、UML 类图，能够对设计模式有个基础的印象。")]),v._v(" "),_("h4",{attrs:{id:"学习顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习顺序"}},[v._v("#")]),v._v(" 学习顺序")]),v._v(" "),_("p",[v._v("根据使用频率、难易度、面试考察率等综合排序，仅供参考，并不绝对！")]),v._v(" "),_("p",[v._v("优先：")]),v._v(" "),_("ol",[_("li",[v._v("单例模式")]),v._v(" "),_("li",[v._v("工厂方法模式")]),v._v(" "),_("li",[v._v("迭代器模式")]),v._v(" "),_("li",[v._v("策略模式")]),v._v(" "),_("li",[v._v("建造者模式")]),v._v(" "),_("li",[v._v("模板方法模式")]),v._v(" "),_("li",[v._v("代理模式")]),v._v(" "),_("li",[v._v("责任链模式")]),v._v(" "),_("li",[v._v("抽象工厂模式")]),v._v(" "),_("li",[v._v("适配器模式")]),v._v(" "),_("li",[v._v("观察者模式")]),v._v(" "),_("li",[v._v("外观模式")])]),v._v(" "),_("p",[v._v("一般：")]),v._v(" "),_("ol",[_("li",[v._v("桥接模式")]),v._v(" "),_("li",[v._v("组合模式")]),v._v(" "),_("li",[v._v("装饰器模式")]),v._v(" "),_("li",[v._v("状态模式")]),v._v(" "),_("li",[v._v("访问者模式")]),v._v(" "),_("li",[v._v("中介者模式")]),v._v(" "),_("li",[v._v("命令模式")]),v._v(" "),_("li",[v._v("备忘录模式")])]),v._v(" "),_("p",[v._v("低优先：")]),v._v(" "),_("ol",[_("li",[v._v("原型模式")]),v._v(" "),_("li",[v._v("享元模式")]),v._v(" "),_("li",[v._v("解释器模式")])]),v._v(" "),_("h4",{attrs:{id:"推荐资源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#推荐资源"}},[v._v("#")]),v._v(" 推荐资源")]),v._v(" "),_("blockquote",[_("p",[v._v("以下资源看 1 - 2 个就足够入门了")])]),v._v(" "),_("ul",[_("li",[v._v("书籍\n"),_("ul",[_("li",[v._v("《图解设计模式》："),_("a",{attrs:{href:"https://www.aliyundrive.com/s/jcQugLGNs1V",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.aliyundrive.com/s/jcQugLGNs1V"),_("OutboundLink")],1),v._v(" 提取码: 5i9c（强烈推荐，用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）")]),v._v(" "),_("li",[v._v("《大话设计模式》："),_("a",{attrs:{href:"https://www.aliyundrive.com/s/73jZWnfAtaA",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.aliyundrive.com/s/73jZWnfAtaA"),_("OutboundLink")],1),v._v(" 提取码: 9gc7（比较有趣）")]),v._v(" "),_("li",[v._v("《Head First 设计模式》："),_("a",{attrs:{href:"https://www.aliyundrive.com/s/GnuQcruh7Us",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.aliyundrive.com/s/GnuQcruh7Us"),_("OutboundLink")],1),v._v(" 提取码: 9gc7")]),v._v(" "),_("li",[v._v("《设计模式：可复用面向对象软件的基础》："),_("a",{attrs:{href:"https://www.aliyundrive.com/s/T9ECaPtxzg4",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.aliyundrive.com/s/T9ECaPtxzg4"),_("OutboundLink")],1),v._v(" 提取码: 9gc7（大黑书，难度较大，有能力和时间才去读）")]),v._v(" "),_("li",[v._v("《JavaScript 设计模式与开发实践》："),_("a",{attrs:{href:"https://www.aliyundrive.com/s/tzcZCU8bqnR",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.aliyundrive.com/s/tzcZCU8bqnR"),_("OutboundLink")],1),v._v(" 提取码: 9gc7（适合前端同学阅读）")]),v._v(" "),_("li",[v._v("《Python 设计模式》："),_("a",{attrs:{href:"https://www.aliyundrive.com/s/3RNoX31XqUy",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.aliyundrive.com/s/3RNoX31XqUy"),_("OutboundLink")],1),v._v(" 提取码: 9gc7")])])]),v._v(" "),_("li",[v._v("视频\n"),_("ul",[_("li",[v._v("尚硅谷图解 Java 设计模式："),_("a",{attrs:{href:"https://www.bilibili.com/video/BV1G4411c7N4",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.bilibili.com/video/BV1G4411c7N4"),_("OutboundLink")],1),v._v(" （讲的很棒也很全面，也和一些主流框架相结合，系统学习 Java 的同学可以看）")]),v._v(" "),_("li",[v._v("五分钟学设计模式："),_("a",{attrs:{href:"https://www.bilibili.com/video/BV1af4y1y7sS",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.bilibili.com/video/BV1af4y1y7sS"),_("OutboundLink")],1),v._v(" （小短快科普，比较轻松）")]),v._v(" "),_("li",[v._v("黑马程序员Java设计模式详解："),_("a",{attrs:{href:"https://www.bilibili.com/video/BV1Np4y1z7BU",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.bilibili.com/video/BV1Np4y1z7BU"),_("OutboundLink")],1),v._v(" （很完整，最后讲解了 Spring 框架的部分设计）")]),v._v(" "),_("li",[v._v("用一个项目讲解 23 种设计模式："),_("a",{attrs:{href:"https://www.bilibili.com/video/BV19g411N7yx",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.bilibili.com/video/BV19g411N7yx"),_("OutboundLink")],1),v._v(" （和项目结合，思路不错，但其中有一些直播翻车，可部分跳过）")])])]),v._v(" "),_("li",[v._v("文档\n"),_("ul",[_("li",[v._v("菜鸟教程："),_("a",{attrs:{href:"https://www.runoob.com/design-pattern/design-pattern-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.runoob.com/design-pattern/design-pattern-tutorial.html"),_("OutboundLink")],1),v._v(" （还是比较推荐的，学过设计模式后如果忘记了，可以查看这个文档快速补回来）")]),v._v(" "),_("li",[v._v("C++ 图说设计模式："),_("a",{attrs:{href:"https://design-patterns.readthedocs.io/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://design-patterns.readthedocs.io/zh_CN/latest/"),_("OutboundLink")],1)]),v._v(" "),_("li",[v._v("Go 语言设计模式系列博客："),_("a",{attrs:{href:"https://lailin.xyz/post/singleton.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://lailin.xyz/post/singleton.html"),_("OutboundLink")],1)])])])]),v._v(" "),_("h3",{attrs:{id:"二、编码实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、编码实现"}},[v._v("#")]),v._v(" 二、编码实现")]),v._v(" "),_("p",[v._v("本阶段的目标：依次编码实现每个设计模式，用任何支持面向对象的编程语言都可以，最好能够独立（不借助任何资料）从 0 写出每个设计模式的代码。")]),v._v(" "),_("h4",{attrs:{id:"资源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[v._v("#")]),v._v(" 资源")]),v._v(" "),_("p",[v._v("一些源码示例，仅供参考，更多的内容可以直接在 GitHub 搜索关键词 "),_("code",[v._v("Design Pattern")]),v._v(" 或 "),_("code",[v._v("设计模式")]),v._v(" ：")]),v._v(" "),_("ul",[_("li",[v._v("各语言设计模式示例代码："),_("a",{attrs:{href:"https://github.com/wx-chevalier/design-pattern-examples",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/wx-chevalier/design-pattern-examples"),_("OutboundLink")],1)]),v._v(" "),_("li",[v._v("Java 23 种设计模式全归纳："),_("a",{attrs:{href:"https://github.com/youlookwhat/DesignPattern",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/youlookwhat/DesignPattern"),_("OutboundLink")],1),v._v(" （教程 + 源码）")]),v._v(" "),_("li",[v._v("C++ 设计模式源码："),_("a",{attrs:{href:"https://github.com/liu-jianhao/Cpp-Design-Patterns",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/liu-jianhao/Cpp-Design-Patterns"),_("OutboundLink")],1),v._v(" （设计模式介绍 + 源码）")]),v._v(" "),_("li",[v._v("JavaScript 示例代码：\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://github.com/wchaowu/javascript",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/wchaowu/javascript"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/zy445566/design-pattern-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/zy445566/design-pattern-in-javascript"),_("OutboundLink")],1)])])]),v._v(" "),_("li",[v._v("Python 示例代码：\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://github.com/wklken/py-patterns",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/wklken/py-patterns"),_("OutboundLink")],1)])])]),v._v(" "),_("li",[v._v("Go 示例代码\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://github.com/mohuishou/go-design-pattern",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/mohuishou/go-design-pattern"),_("OutboundLink")],1)])])])]),v._v(" "),_("h3",{attrs:{id:"三、项目实战"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、项目实战"}},[v._v("#")]),v._v(" 三、项目实战")]),v._v(" "),_("p",[v._v("本阶段的目标：通过做项目或阅读项目源码来进一步强化每个设计模式的实际应用。做到能根据某个场景主动选出合适的设计模式来优化代码、灵活运用，并且能够通过文件命名、项目目录结构等途径来快速判断出某个框架是否使用了设计模式。")]),v._v(" "),_("p",[v._v("可以先通过一个视频了解设计模式的实际应用：")]),v._v(" "),_("ul",[_("li",[v._v("实际工作中，如何运用 Java 设计模式："),_("a",{attrs:{href:"https://www.bilibili.com/video/BV1tK4y1s7Uo",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.bilibili.com/video/BV1tK4y1s7Uo"),_("OutboundLink")],1)])]),v._v(" "),_("p",[v._v("列举一些设计模式在框架源码中的应用：")]),v._v(" "),_("blockquote",[_("p",[v._v("部分内容源于网络")])]),v._v(" "),_("ul",[_("li",[v._v("Spring\n"),_("ul",[_("li",[v._v("工厂模式：通过 BeanFactory 和 ApplicationContext 来创建对象")]),v._v(" "),_("li",[v._v("单例模式：Spring Bean 默认为单例模式")]),v._v(" "),_("li",[v._v("策略模式：例如 Resource 的实现类，针对不同的资源文件，实现了不同方式的资源获取策略")]),v._v(" "),_("li",[v._v("代理模式：Spring 的 AOP 功能用到了 JDK 的动态代理和 CGLIB 字节码生成技术")]),v._v(" "),_("li",[v._v("模板方法：可以将相同部分的代码放在父类中，而将不同的代码放入不同的子类中，用来解决代码重复的问题。比如RestTemplate、JmsTemplate、JpaTemplate")]),v._v(" "),_("li",[v._v("适配器模式：Spring AOP 的增强或通知（Advice）使用到了适配器模式")]),v._v(" "),_("li",[v._v("观察者模式：Spring 事件驱动模型")]),v._v(" "),_("li",[v._v("桥接模式：可以根据客户的需求能够动态切换不同的数据源。比如我们的项目需要连接多个数据库，客户在每次访问中根据需要会去访问不同的数据库")])])]),v._v(" "),_("li",[v._v("Spring MVC\n"),_("ul",[_("li",[v._v("组合模式：WebMvcConfigurerComposite，树枝和树叶都实现了相同的抽象类或接口 WebMvcConfigurer")]),v._v(" "),_("li",[v._v("责任链模式：DispatcherServlet 依次拦截和处理请求")]),v._v(" "),_("li",[v._v("适配器模式：HandlerAdapter 处理器适配")])])]),v._v(" "),_("li",[v._v("MyBatis（参考："),_("a",{attrs:{href:"https://blog.csdn.net/aha_jasper/article/details/108701785",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://blog.csdn.net/aha_jasper/article/details/108701785"),_("OutboundLink")],1),v._v(" ）\n"),_("ul",[_("li",[v._v("Builder + Factory 模式：创建 SqlSession 工厂和 SqlSession")]),v._v(" "),_("li",[v._v("模板方法模式：BaseExecutor 定义执行器基本流程")]),v._v(" "),_("li",[v._v("解释器模式：SqlNode 动态解析 SQL")]),v._v(" "),_("li",[v._v("单例模式：ErrorContext 线程唯一")]),v._v(" "),_("li",[v._v("装饰器模式：Cache 的实现用组合而非继承实现更灵活地缓存方式结合")]),v._v(" "),_("li",[v._v("迭代器模式：PropertyTokenizer 利用迭代器模式实现属性解析器")]),v._v(" "),_("li",[v._v("适配器模式：Log 适配不同的日志框架")])])]),v._v(" "),_("li",[v._v("Google Guava（参考："),_("a",{attrs:{href:"https://blog.csdn.net/aha_jasper/article/details/108695561",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://blog.csdn.net/aha_jasper/article/details/108695561"),_("OutboundLink")],1),v._v(" ）\n"),_("ul",[_("li",[v._v("Builder 模式：更方便地构建内存缓存")]),v._v(" "),_("li",[v._v("Wrapper 模式（代理模式、装饰器、适配器模式）：轻松实现对类的扩展")]),v._v(" "),_("li",[v._v("Immutable 模式：不可变集合实现，如 ImmutableList、ImmutableSet、ImmutableMap 等")])])]),v._v(" "),_("li",[v._v("更多可以自行学习：\n"),_("ul",[_("li",[v._v("Netty")]),v._v(" "),_("li",[v._v("SpringBoot")]),v._v(" "),_("li",[v._v("Tomcat")]),v._v(" "),_("li",[v._v("Dubbo")]),v._v(" "),_("li",[v._v("Spring Cloud")])])])]),v._v(" "),_("h3",{attrs:{id:"资源-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源-2"}},[v._v("#")]),v._v(" 资源")]),v._v(" "),_("ul",[_("li",[v._v("《设计模式之美》专栏："),_("a",{attrs:{href:"https://blog.csdn.net/aha_jasper/article/details/105695163",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://blog.csdn.net/aha_jasper/article/details/105695163"),_("OutboundLink")],1),v._v(" （原作者 Google 王争设计模式之美："),_("a",{attrs:{href:"https://time.geekbang.org/column/intro/250",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://time.geekbang.org/column/intro/250"),_("OutboundLink")],1),v._v(" ，是极客时间的付费课，里面的内容，尤其是开源实战和项目实战的部分讲的很好！有收获的朋友还是请支持正版哦）")]),v._v(" "),_("li",[v._v("Spring 相关框架源码分析视频："),_("a",{attrs:{href:"https://www.bilibili.com/video/BV1kF411e7WR",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.bilibili.com/video/BV1kF411e7WR"),_("OutboundLink")],1),v._v(" （结合设计模式，包括 Spring、SpringMVC、SpringBoot、Tomcat 等）")])]),v._v(" "),_("h3",{attrs:{id:"四、备战面试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、备战面试"}},[v._v("#")]),v._v(" 四、备战面试")]),v._v(" "),_("p",[v._v("面试时对设计模式的考察主要有 4 种形式：")]),v._v(" "),_("ol",[_("li",[v._v("直接问你某个设计模式的作用和大致的原理，考察你对设计模式的了解程度")]),v._v(" "),_("li",[v._v("让你手写某个设计模式的代码，考察你对设计模式的熟悉程度和编码能力")]),v._v(" "),_("li",[v._v("给你一个实际的业务场景，让你去设计系统，考察你对设计模式的理解应用能力和逻辑思维")]),v._v(" "),_("li",[v._v("问你某个框架（轮子）的核心设计和源码细节，考察你对设计模式的理解应用能力")])]),v._v(" "),_("h4",{attrs:{id:"经典面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#经典面试题"}},[v._v("#")]),v._v(" 经典面试题")]),v._v(" "),_("ol",[_("li",[v._v("理论：简单介绍一下软件开发原则？")]),v._v(" "),_("li",[v._v("理论：设计模式如何分类？")]),v._v(" "),_("li",[v._v("你用过哪些设计模式？举例说明设计模式在你的项目或是某个框架源码中的应用。")]),v._v(" "),_("li",[v._v("说出某个设计模式的优缺点？什么时候使用它？")]),v._v(" "),_("li",[v._v("单例模式有哪些实现方式？分别有哪些优缺点？请手写其中一种")]),v._v(" "),_("li",[v._v("原型模式和单例模式的区别是什么？")]),v._v(" "),_("li",[v._v("简单工厂、工厂方法和抽象工厂三者有什么区别？")]),v._v(" "),_("li",[v._v("介绍一下代理模式，说一下静态代理和动态代理（比如 Spring AOP 就用到了）的区别？")])]),v._v(" "),_("h4",{attrs:{id:"资源-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源-3"}},[v._v("#")]),v._v(" 资源")]),v._v(" "),_("ul",[_("li",[v._v("设计模式面试题汇总："),_("a",{attrs:{href:"https://pan.baidu.com/s/1tjIGc7pnHjgiFPo0fhcKXw",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://pan.baidu.com/s/1tjIGc7pnHjgiFPo0fhcKXw"),_("OutboundLink")],1),v._v(" 提取码: wuan（朋友 JavaGuide 整理，很全面 👍🏻）")]),v._v(" "),_("li",[v._v('面试官最爱问的13道"设计模式"题（视频）：'),_("a",{attrs:{href:"https://www.bilibili.com/video/BV1fR4y1N74H",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.bilibili.com/video/BV1fR4y1N74H"),_("OutboundLink")],1)])]),v._v(" "),_("p",[v._v("加油小伙伴们！")])])}),[],!1,null,null,null);_.default=e.exports}}]);